/*分析 Trace 所得的資料*/
-- 原始資料在「工作負載檔案」，透過暫時資料表來分析
DECLARE @TracePath varchar(200)='c:\temp\myTrace.trc'
drop table if exists #Temp
SELECT * INTO #Temp FROM  fn_trace_gettable(@TracePath, default)

--對 Recompile 的現象做分析
SELECT StartTime,EventClass, TextData, SPID, Duration, CPU, Reads, Writes 
FROM  #Temp 
WHERE Duration > 10 AND TextData is NOT NULL AND EventClass = 37  -- sp:Recompile 事件 
ORDER BY Duration DESC


-- 追蹤所得的資料本來就在資料表內，直接透過 T-SQL 分析
SELECT SUBSTRING(TextData, 1,30) AS '查詢內容',
COUNT(*) '執行次數',
AVG(duration) AS '平均執行時間(ms)',
AVG(cpu) AS '平均 CPU 時間(ms)',
AVG(reads) AS '平均閱讀次數',
AVG(writes) AS '平均寫入次數'
FROM #Temp
WHERE EventClass=12    -- 12 代表 SQL:BatchCompleted 事件
GROUP BY SUBSTRING(TextData, 1,30)

--找出一段時間內，最耗時的 SQL 語法
SELECT SUBSTRING(TextData, 1,150) AS '查詢內容',
COUNT(*) '執行次數',
SUM(duration) AS '總執行時間(ms)',
AVG(duration) AS '平均執行時間(ms)',
AVG(cpu) AS '平均 CPU 時間(ms)',
AVG(reads) AS '平均閱讀次數',
AVG(writes) AS '平均寫入次數'
FROM #Temp
GROUP BY SUBSTRING(TextData, 1,150)
ORDER BY SUM(duration) DESC
